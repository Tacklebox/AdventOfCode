use std::{collections::HashMap, usize};

use common::grid::{
    coordinates::{self, Point, EAST, NORTH, SOUTH, WEST},
    Grid,
};

fn main() -> anyhow::Result<()> {
    println!("{}", common::advent(part1, part2)?);
    Ok(())
}

fn part2(input: Vec<String>) -> anyhow::Result<usize> {
    let grid = Grid::from_iterators(
        input
            .iter()
            .map(|line| line.chars().map(|n| n as u8 - b'0')),
    );

    let mut trail_heads: Vec<Point> = Vec::new();
    for coordinate in grid.points() {
        if *grid.get(coordinate).unwrap() == 0 {
            trail_heads.push(coordinate);
        }
    }

    let mut memo: HashMap<Point, usize> = HashMap::new();
    let mut total = 0;
    for trail in trail_heads {
        total += paths_from_point(0, trail, &grid, &mut memo);
    }
    Ok(total)
}

fn paths_from_point(
    prev_elevation: u8,
    point: Point,
    grid: &Grid<u8>,
    memo: &mut HashMap<Point, usize>,
) -> usize {
    if let Some(num_paths) = memo.get(&point) {
        return *num_paths;
    }
    let mut total_paths = 0;
    for direction in [NORTH, EAST, SOUTH, WEST] {
        let neighbour = point + direction;
        if let Some(&elevation) = grid.get(neighbour) {
            if elevation == 9 && prev_elevation == 8 {
                memo.insert(neighbour, 1);
                total_paths += 1;
            } else if elevation == prev_elevation + 1 {
                let paths_from_neighbour = paths_from_point(elevation, neighbour, grid, memo);
                total_paths += paths_from_neighbour;
            }
        }
    }
    memo.insert(point, total_paths);
    total_paths
}

fn part2(input: Vec<String>) -> anyhow::Result<usize> {
    let _ = input;
    todo!();
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_part1() {
        let inputs: Vec<Vec<String>> = [include_str!("../testcase_1.txt")]
            .iter()
            .map(|input| input.lines().map(String::from).collect::<Vec<String>>())
            .collect();
        let outputs = [36];
        assert_eq!(inputs.len(), outputs.len());
        for (input, &output) in inputs.into_iter().zip(outputs.iter()) {
            assert_eq!(part1(input).unwrap(), output);
        }
    }

    #[test]
    fn test_part2() {
        todo!("Add test for part 2");
        // let inputs: Vec<Vec<String>> = [include_str!("../testcase_1.txt")]
        //     .iter()
        //     .map(|input| input.lines().map(String::from).collect::<Vec<String>>())
        //     .collect();
        // let outputs = [42];
        // assert_eq!(inputs.len(), outputs.len());
        // for (input, &output) in inputs.into_iter().zip(outputs.iter()) {
        //     assert_eq!(part2(input).unwrap(), output);
        // }
    }
}
